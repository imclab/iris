* TODO Get something working.
  #+BEGIN_SRC java :tangle working.bsh :shebang #!/usr/bin/env bsh
    addClassPath("lib/stt.jar");
    addClassPath("lib/minim.jar");
    addClassPath("lib/minim-spi.jar");
    addClassPath("lib/jsminim.jar");
    addClassPath("lib/tritonus_share.jar");
    addClassPath("lib/javaFlacEncoder-0.1.jar");
    addClassPath("lib/core.jar");
    
    import com.getflourish.stt.STT;
    import processing.core.PApplet;
    
    new PApplet() {
            public setup() {
                // size(400, 400);
                print("oeunthouethn");
                noLoop();
            }
    
            draw() {
                // background(0);
            }
    
            transcribe(utterance, confidence) {
            }
    
            keyPressed() {
            }
    
            keyReleased() {
            }
        };
    
    stt = new STT(applet);
    
  #+END_SRC

  If we're going to do this without the autorecord and processing
  cruft, we need (I was going to say [[http://code.compartmental.net/tools/minim/][minim]], but it's some kind of
  Processing-specific piece of shit) [[http://www.tritonus.org/][tritonus]].

  On the [[https://github.com/fx-lange/ofxGSTT][C-side]], on the other hand, there's [[http://www.mega-nerd.com/libsndfile/][sndfile]] and [[http://flac.sourceforge.net/][libFlac]]; looks
  like [[http://freedesktop.org/software/pulseaudio/doxygen/simple.html][pulseaudio]]'s the way to go, though, for actually recording.

  What about [[http://www.jsresources.org/examples/audio_playing_recording.html][this shit]] on Java? Or [[http://docs.oracle.com/javase/tutorial/sound/accessing.html][from scratch]]. Write with [[http://javaflacencoder.sourceforge.net/][this]]?
  [[http://www.jsresources.org/examples/audio_playing_recording.html][Examples]] of recording to file.

  Now that we have an =AudioInputStream=, can we avoid serializing it
  before converting to FLAC? =AudioSystem.write= takes an
  =OutputStream=, by the way.

  #+BEGIN_SRC java :tangle mixer.bsh :shebang #!/usr/bin/env bsh
    addClassPath("lib/guava-10.0.1.jar");
    addClassPath("lib/javaFlacEncoder-0.2.3.jar");
    addClassPath("lib/jflac-codec-1.4.0-SNAPSHOT.jar");
    
    import javax.sound.sampled.AudioSystem;
    import javax.sound.sampled.Port;
    import javax.sound.sampled.TargetDataLine;
    import javax.sound.sampled.DataLine;
    import javax.sound.sampled.AudioFormat;
    import javax.sound.sampled.AudioInputStream;
    import javax.sound.sampled.AudioFileFormat;
    import java.util.Timer;
    import java.util.TimerTask;
    import java.io.ByteArrayOutputStream;
    
    import com.google.common.collect.ObjectArrays;
    import javaFlacEncoder.FLACFileOutputStream;
    import org.kc7bfi.jflac.sound.spi.FlacFileFormatType;
    import org.kc7bfi.jflac.sound.spi.FlacEncoding;
    
    // It's a shame we have to specify this: command-line param?
    INPUT_INDEX = 1;
    FORMAT = new AudioFormat((float) 8000.0, 8, 1, true, false);
    
    mixerInfo = AudioSystem.getMixerInfo()[INPUT_INDEX];
    target = AudioSystem.getTargetDataLine(FORMAT, mixerInfo);
    target.open(FORMAT);
    target.start();
    
    timer = new Timer();
    task = new TimerTask() {
            public void run() {
                // Otherwise, our WAV is truncated.
                target.flush();
                target.stop();
                target.close();
                // Otherwise, the program never terminates.
                timer.cancel();
            }
        };
    timer.schedule(task, 1000);
    
    inputStream = new AudioInputStream(target);
    AudioSystem.write(inputStream,
                      AudioFileFormat.Type.WAVE,
                      new File("harro.wav"));
    
  #+END_SRC

  This works, by the way (based on [[http://getstreaming.wordpress.com/tag/speech-to-text/][this]]):

  #+BEGIN_SRC sh
    curl -H "Content-Type: audio/x-flac; rate=16000" -F Content=@harro.flac -k 'https://www.google.com/speech-api/v1/recognize?xjerr=1&client=chromium&lang=en-US'
    # {"status":0,"id":"fa71c13664c1b6804bd7f2ef84a2a4e0-1","hypotheses":[{"utterance":"test","confidence":0.95221627}]}
  #+END_SRC

  Having been converted with this:

  #+BEGIN_SRC sh
    sox harro.wav -2 -r 16000 harro.flac
  #+END_SRC

  [[http://www.developer.com/java/other/article.php/2105421/Java-Sound-Capturing-Microphone-Data-into-an-Audio-File.htm][By the way]]:

  #+BEGIN_QUOTE
: In addition to its other features, the AudioSystem.write method knows
: how to detect that the stop method has been invoked on the
: TargetDataLine object (see Listing 7) and to close the output file
: when that happens.  
  #+END_QUOTE
